#!/usr/bin/env node

/* eslint-disable no-console */

var notefile = require('../lib/util.js'),
    readline = require('readline'),
    Getopt = require('node-getopt'),
    file, note, getopt, opt, rl;

getopt = new Getopt([
    ['', 'add-notefile[=FILE(,S)]', 'Add a new notefile(s).'],
    ['', 'add-noteserver[=SERVER(,S)]', 'Add a new noteserver(s).'],
    ['', 'cat[=NOTEFILE]', 'Dump the contents of a notefile to STDIN.'],
    ['c', 'config', 'Show the contents of the `.notefilerc` config file.'],
    ['', 'init', 'Setup and create the .notefilerc config file.'],
    ['n', 'notefile=FILE', 'When piping from STDIN the notefile to write to MUST be specified.'],
    ['', 'remove-notefile[=FILE(,S)]', 'Remove a notefile(s).'],
    ['', 'remove-noteserver[=SERVER(,S)]', 'Remove a noteserver(s).'],
    ['', 'set-default', 'Change a default value.'],
    ['h', 'help', 'Display help.']
]).bindHelp();

// `parseSystem` is an alias of parse(process.argv.slice(2)).
opt = getopt.parseSystem();

switch (true) {
    case !!opt.options['init']:
        notefile.init();
        break;

    case ((file = opt.options['cat']) !== undefined):
        notefile.catNotefile(file);
        break;

    case !!opt.options['config']:
        notefile.getConfigFile().then(function (res) {
            console.log(
                'Reading config file ' + res.configFile + '\n\n',
                res.data
            );
        });
        break;

    case ((file = opt.options['add-notefile']) !== undefined):
        notefile.addNotefile(file);
        break;

    case ((file = opt.options['add-noteserver']) !== undefined):
        notefile.addNoteserver(file);
        break;

    case ((file = opt.options['remove-notefile']) !== undefined):
        notefile.removeNotefile(file);
        break;

    case ((file = opt.options['remove-noteserver']) !== undefined):
        notefile.removeNoteserver(file);
        break;

    case !!opt.options['set-default']:
        notefile.setDefault();
        break;

    default:
        note = opt.argv[0] || '';

        notefile.getConfigFile().then(function (res) {
            var json = JSON.parse(res.data);

            if (!note) {
                rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout,
                    terminal: true
                });

                rl.on('line', function (line) {
                    note += line + '\n';
                });

                rl.on('close', function () {
                    notefile.makeRequest(note + notefile.generateNewlines(json), opt.options['notefile']);
                });
            } else {
                // Add any newlines to the note text and pass on.
                notefile.makeRequest(note + notefile.generateNewlines(json));
            }
        });
}

