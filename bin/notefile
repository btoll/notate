#!/usr/bin/env node

/* eslint-disable no-console */

(() => {
    'use strict';

    let notefile = require('../lib/util.js'),
        readline = require('readline'),
        Getopt = require('node-getopt'),
        file, note, getopt, opt, rl;

    getopt = new Getopt([
        ['', 'add-notefile[=file(,s)]', 'Add a new notefile(s).'],
        ['', 'add-noteserver[=server(,s)]', 'Add a new noteserver(s).'],
        ['', 'cat[=notefile]', 'Dump the contents of a notefile to STDIN.'],
        ['c', 'config', 'Show the contents of the `.notefilerc` config file.'],
        ['e', 'edit', 'Edit a notefile.'],
        ['', 'init', 'Setup and create the .notefilerc config file.'],
        ['n', 'notefile=file', 'When piping from STDIN the notefile to write to MUST be specified.'],
        ['', 'remove-notefile[=file(,s)]', 'Remove a notefile(s).'],
        ['', 'remove-noteserver[=server(,s)]', 'Remove a noteserver(s).'],
        ['', 'set-default', 'Change a default value.'],
        ['h', 'help', 'Display help.']
    ]).bindHelp();

    // `parseSystem` is an alias of parse(process.argv.slice(2)).
    opt = getopt.parseSystem();

    switch (true) {
        case !!opt.options['init']:
            notefile.init();
            break;

        case ((file = opt.options['cat']) !== undefined):
            notefile.catNotefile(file);
            break;

        case !!opt.options['config']:
            notefile.getConfigFile().then((res) => {
                console.log(
                    'Reading config file ' + res.configFile + '\n\n',
                    res.data
                );
            });
            break;

        case ((file = opt.options['edit']) !== undefined):
            notefile.edit(file);
            break;

        case ((file = opt.options['add-notefile']) !== undefined):
            notefile.addNotefile(file);
            break;

        case ((file = opt.options['add-noteserver']) !== undefined):
            notefile.addNoteserver(file);
            break;

        case ((file = opt.options['remove-notefile']) !== undefined):
            notefile.removeNotefile(file);
            break;

        case ((file = opt.options['remove-noteserver']) !== undefined):
            notefile.removeNoteserver(file);
            break;

        case !!opt.options['set-default']:
            notefile.setDefault();
            break;

        default:
            note = opt.argv[0] || '';

            notefile.getConfigFile().then((res) => {
                let json = JSON.parse(res.data);

                if (!note) {
                    console.log('Type your note here, ^C to write:\n');

                    rl = readline.createInterface({
                        input: process.stdin,
                        output: process.stdout,
                        terminal: true
                    });

                    rl.on('line', (line) => {
                        note += line + '\n';
                    });

                    rl.on('close', () => {
                        notefile.makeRequest(note + notefile.generateNewlines(json), opt.options['notefile']);
                    });
                } else {
                    // Add any newlines to the note text and pass on.
                    notefile.makeRequest(note + notefile.generateNewlines(json));
                }
            });
    }
}());

